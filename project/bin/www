#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');
var mongodb = require('mongodb');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// usernames which are currently connected to the chat
var usernames = {};
var listOfPlayers = {};


/** DATABASE ACCESSES **/
var getTeams = function (callback) {
  var MongoClient = mongodb.MongoClient;
  var url = 'mongodb://localhost:27017/pwdb';
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongodb server', err);
      return callback(false);
    } else {
      var collection = db.collection('teams');
      collection.find({}).toArray(function (err, result) {
        if (err) {
          console.log('Unable to get teams', err);
          return callback(false);
        } else {
          return callback(result);
        }
      });
    }
  });
};

var addTeam = function(team, callback){
  var MongoClient = mongodb.MongoClient;
  var url = 'mongodb://localhost:27017/pwdb';
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongodb server', err);
      return callback(false);
    } else {
      var collection = db.collection('teams');
      collection.insertOne(team, function (err, result) {
        if (err) {
          console.log('Unable to get teams', err);
          return callback(false);
        } else {
          return callback(result);
        }
      });
    }
  });
};

var teamExists = function(team, callback){
  var MongoClient = mongodb.MongoClient;
  var url = 'mongodb://localhost:27017/pwdb';
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongodb server', err);
      return callback(false);
    } else {
      var collection = db.collection('teams');
      collection.find(team).toArray(function (err, result) {
        if (err) {
          console.log('Unable to get team', team, err);
          return callback(false);
        } else {
          return callback(result.length);
        }
      });
    }
  });
};

var getEnigmas = function (callback) {
  var MongoClient = mongodb.MongoClient;
  var url = 'mongodb://localhost:27017/pwdb';
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongodb server', err);
      return callback(false);
    } else {
      var collection = db.collection('enigmas');
      collection.find({}).toArray(function (err, result) {
        if (err) {
          console.log('Unable to get enigmas', err);
          return callback(false);
        } else {
          return callback(result);
        }
      });
    }
  });
};

/** SOCKET IO **/
io.sockets.on('connection', function (socket) {
  socket.on('signup', function (data) {
    console.log("[Sign Up] Received : " + JSON.stringify(data));

    teamExists({"name":data.name}, function(team){
      console.log(team);
      if(team) // Already existing team
        socket.emit('signup', {"status" : false});
      else // Team available
        addTeam(data, function(){ // Adding team
          socket.emit('signup', {"status" : true}); // Team added
        });
    });
  });

  socket.on('signin', function (data) {
    console.log("[Sign In] Received : " + JSON.stringify(data));

    teamExists(data, function(team){
      console.log(team);
      if(team) // Team exists
        socket.emit('signin', {"status" : true, "team": team});
      else // Team doesn't exists
        socket.emit('signin', {"status" : false});
    });
  });

  socket.on('getteams', function () {
    getTeams(function (data) {
      console.log("[Get Teams] Received", data);
      socket.emit('getteams', data);
    });
  });

  socket.on('getenigmas', function () {
    getEnigmas(function (data) {
      console.log("[Get Enigmas] Received", data);
      socket.emit('getenigmas', data);
    });
  });

  socket.on('addenigma', function (enigma) {
    console.log("[Add Enigma] Received");

    console.log(JSON.stringify(enigma));
    // TODO: ADD ENIGMA

    var enigmas = getEnigmas();
    io.sockets.emit('getenigmas', enigmas);
  });

  socket.on('sendchat', function (data) {
    io.sockets.emit('updatechat', socket.username, data);
  });

  socket.on('sendpos', function (newPos) {
    socket.broadcast.emit('updatepos', socket.username, newPos);
  });

  socket.on('adduser', function (username) {
    socket.username = username;
    usernames[username] = username;
    socket.emit('updatechat', 'SERVER', 'you have connected');
    socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');
    io.sockets.emit('updateusers', usernames);

    var player = {'x' : 0, 'y' : 0, 'v' : 0};
    listOfPlayers[username] = player;
    io.sockets.emit('updatePlayers', listOfPlayers);
  });

  socket.on('disconnect', function () {

    delete usernames[socket.username];
    io.sockets.emit('updateusers', usernames);

    delete listOfPlayers[socket.username];
    io.sockets.emit('updatePlayers', listOfPlayers);

    socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
