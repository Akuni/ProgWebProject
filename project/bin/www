#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// usernames which are currently connected to the chat
var usernames = {};
var listOfPlayers = {};

io.sockets.on('connection', function (socket) {

  // when the client emits 'sendchat', this listens and executes
  socket.on('sendchat', function (data) {
    // we tell the client to execute 'updatechat' with 2 parameters
    io.sockets.emit('updatechat', socket.username, data);
  });

  // when the client emits 'sendchat', this listens and executes
  socket.on('sendpos', function (newPos) {
    // we tell the client to execute 'updatepos' with 2 parameters
    //console.log("recu sendPos");
    socket.broadcast.emit('updatepos', socket.username, newPos);
  });

  // when the client emits 'adduser', this listens and executes
  socket.on('adduser', function(username){
    // we store the username in the socket session for this client
    // the 'socket' variable is unique for each client connected,
    // so we can use it as a sort of HTTP session
    socket.username = username;
    // add the client's username to the global list
    // similar to usernames.michel = 'michel', usernames.toto = 'toto'
    usernames[username] = username;
    // echo to the current client that he is connecter
    socket.emit('updatechat', 'SERVER', 'you have connected');
    // echo to all client except current, that a new person has connected
    socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');
    // tell all clients to update the list of users on the GUI
    io.sockets.emit('updateusers', usernames);

    // Create a new player and store his position too... for that
    // we have an object that is a "list of players" in that form
    // listOfPlayer = {'michel':{'x':0, 'y':0, 'v':0},
    //                          john:{'x':10, 'y':10, 'v':0}}
    // for this example we have x, y and v for speed... ?
    var player = {'x':0, 'y':0, 'v':0}
    listOfPlayers[username] = player;
    io.sockets.emit('updatePlayers',listOfPlayers);
  });

  // when the user disconnects.. perform this
  socket.on('disconnect', function(){
    // remove the username from global usernames list
    delete usernames[socket.username];
    // update list of users in chat, client-side
    io.sockets.emit('updateusers', usernames);

    // Remove the player too
    delete listOfPlayers[socket.username];
    io.sockets.emit('updatePlayers',listOfPlayers);

    // echo globally that this client has left
    socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
