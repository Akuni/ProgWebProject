#!/usr/bin/env node

/**
 * Module dependencies.
 */
var tmp = require('../app');
var app = tmp.app;
var server = tmp.server;
var io = tmp.io;

// var app = require('../app');
var debug = require('debug')('project:server');
var dbmanager = require('../dbmanager');

/**
 * Listen on provided port, on all network interfaces.
 */
server.on('error', onError);
server.on('listening', onListening);

// usernames which are currently connected to the chat
var usernames = {};
var listOfPlayers = {};


/** SOCKET IO **/
io.sockets.on('connection', function (socket) {
  socket.on('signup', function (team) {
    console.log("[Sign Up] Received : " + JSON.stringify(team));

    dbmanager.teams.exists({"name" : team.name}, function (exists) {
      console.log(exists);
      if (exists) // Already existing team
        socket.emit('signup', {"status" : false});
      else // Team available
        dbmanager.teams.add(team, function () { // Adding team
          socket.emit('signup', {"status" : true}); // Team added
          dbmanager.teams.get(function (data) {
            io.sockets.emit('getteams', data);
          }, {}, socket.request.headers.behavior);
        }, socket.request.headers.behavior);
    }, socket.request.headers.behavior);
  });

  socket.on('signin', function (data) {
    console.log("[Sign In] Received : " + JSON.stringify(data));

    dbmanager.teams.exists(data, function (team) {
      console.log(team);
      if (team) // Team exists
        socket.emit('signin', {"status" : true, "team" : team});
      else // Team doesn't exists
        socket.emit('signin', {"status" : false});
    }, socket.request.headers.behavior);
  });

  socket.on('getteams', function () {
    /** ----- SESSION WEBSOCKET SIDE TEST STARRT ----- */
    var views = socket.client.request.session.views;
    // console.log(socket);
    // console.log(socket.client.request.session);
    if (!views) { views = socket.client.request.session.views = {}; }
    // get the url pathname
    var pathname = 'bleh2';
    // count the views
    views[pathname] = (views[pathname] || 0) + 1;
    // console.log(socket.client.request.session);
    console.log("You've seen this page " + views[pathname] + " times.");
    /** ----- SESSION WEBSOCKET SIDE TEST END ----- */


    console.log(socket.request.headers.behavior);
    dbmanager.teams.get(function (data) {
      console.log("[Get Teams] Received", data);
      socket.emit('getteams', data);
    }, {}, socket.request.headers.behavior);
  });

  socket.on('getenigmas', function () {
    dbmanager.enigmas.get(function (data) {
      console.log("[Get Enigmas] Received", data);
      socket.emit('getenigmas', data);
    }, {}, socket.request.headers.behavior);
  });

  socket.on('addenigma', function (enigma) {
    console.log("[Add Enigma] Received");
    console.log(JSON.stringify(enigma));
    dbmanager.enigmas.add(enigma, function () { // Adding enigma
      dbmanager.enigmas.get(function (data) {
        io.sockets.emit('getenigmas', data);
      }, {}, socket.request.headers.behavior);
    }, socket.request.headers.behavior);
  });

  socket.on('removeteam', function (id) {
    console.log("[Remove Enigma] Received");

    console.log(id);
    dbmanager.teams.remove(id, function () { // Adding enigma
      dbmanager.teams.get(function (data) {
        io.sockets.emit('getteams', data);
      }, {}, socket.request.headers.behavior);
    }, socket.request.headers.behavior);
  });

  socket.on('removeenigma', function (id) {
    console.log("[Remove Enigma] Received");

    console.log(id);
    dbmanager.enigmas.remove(id, function () { // Adding enigma
      dbmanager.enigmas.get(function (data) {
        io.sockets.emit('getenigmas', data);
      }, {}, socket.request.headers.behavior);
    }, socket.request.headers.behavior);
  });

  socket.on('sendchat', function (data) {
    io.sockets.emit('updatechat', socket.username, data);
  });

  socket.on('sendpos', function (newPos) {
    socket.broadcast.emit('updatepos', socket.username, newPos);
  });

  socket.on('adduser', function (username) {
    socket.username = username;
    usernames[username] = username;
    socket.emit('updatechat', 'SERVER', 'you have connected');
    socket.broadcast.emit('updatechat', 'SERVER', username + ' has connected');
    io.sockets.emit('updateusers', usernames);

    var player = {'x' : 0, 'y' : 0, 'v' : 0};
    listOfPlayers[username] = player;
    io.sockets.emit('updatePlayers', listOfPlayers);
  });

  socket.on('disconnect', function () {

    delete usernames[socket.username];
    io.sockets.emit('updateusers', usernames);

    delete listOfPlayers[socket.username];
    io.sockets.emit('updatePlayers', listOfPlayers);

    socket.broadcast.emit('updatechat', 'SERVER', socket.username + ' has disconnected');
  });
});

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
